variables:
  azureContainerRegistry: 'bestrong'
  azureResourceGroup: 'rg-bestrong'
  imageRepository: 'bestrong-api'
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: 'bestrong-acr'
  azureRmServiceConnection: 'azure-conn'

stages:
# Stage 1: Build & Push Docker Image to ACR
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
          latest

# Stage 2: Package & Push Helm Chart to ACR
- stage: Package
  displayName: 'Package Helm Chart'
  jobs:
  - job: PackageHelmChart
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'
    - task: AzureCLI@2
      displayName: 'Push Helm Chart to ACR as OCI artifact'
      inputs:
        azureSubscription: '$(azureRmServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(azureContainerRegistry)
          helm package $(Build.SourcesDirectory)/Helm \
            --version $(Build.BuildId) \
            --destination $(Build.ArtifactStagingDirectory)
          export HELM_EXPERIMENTAL_OCI=1
          CHART_PATH=$(Build.ArtifactStagingDirectory)/bestrong-$(Build.BuildId).tgz
          helm push $CHART_PATH oci://$(azureContainerRegistry).azurecr.io/helm

# Stage 3: Deploy to AKS (Blue-Green)
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn:
    - Build
    - Package
  jobs:
  - deployment: DeployToAKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'
          - task: AzureCLI@2
            displayName: 'Install cert-manager and Deploy to AKS'
            inputs:
              azureSubscription: '$(azureRmServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo " Getting AKS credentials..."
                az aks get-credentials -n aks-bestrong -g $(azureResourceGroup)

                echo " Installing ingress-nginx with LoadBalancer..."
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                helm repo update
                helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                  --namespace ingress-nginx \
                  --create-namespace \
                  --set controller.service.type=LoadBalancer

                echo " Installing cert-manager..."
                helm repo add jetstack https://charts.jetstack.io
                helm repo update
                helm upgrade --install cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --create-namespace \
                  --set installCRDs=true

                echo " Applying Self-Signed ClusterIssuer..."
                kubectl apply -f $(Build.SourcesDirectory)/Helm/config/selfsigned-clusterissuer.yaml

                echo " Installing Prometheus and Grafana..."
                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                helm repo update
                helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
                  --namespace monitoring \
                  --create-namespace \
                  -f $(Build.SourcesDirectory)/Helm/monitoring/values.yaml

                echo "Waiting for CRDs to become available..."
                for crd in prometheuses.monitoring.coreos.com \
                          prometheusrules.monitoring.coreos.com \
                          servicemonitors.monitoring.coreos.com; do
                  echo "Waiting for CRD $crd..."
                  until kubectl get crd $crd > /dev/null 2>&1; do
                    sleep 5
                  done
                done

                echo "apply prometheus rule"
                kubectl apply -f $(Build.SourcesDirectory)/Helm/config/bestrong-alerts.yaml

                echo " Logging in to ACR..."
                az acr login --name $(azureContainerRegistry)

                echo " Pulling Helm chart from ACR..."
                export HELM_EXPERIMENTAL_OCI=1
                helm pull oci://$(azureContainerRegistry).azurecr.io/helm/bestrong:$(Build.BuildId) --destination $(Agent.TempDirectory)

                echo " Deploying Green environment..."
                helm upgrade --install bestrong-api \
                  $(Agent.TempDirectory)/bestrong-$(Build.BuildId).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(tag) \
                  --set replicaCount=2 \
                  --set image.pullPolicy=IfNotPresent \
                  --set environment.ASPNETCORE_ENVIRONMENT=Production \
                  --set ingress.host=bestrong.local \
                  --set tls.issuer=selfsigned-issuer \
                  --set blueGreen.enabled=true \
                  --set blueGreen.activeEnvironment=blue \
                  --set blueGreen.blue.enabled=true \
                  --set blueGreen.blue.image.tag=158 \
                  --set blueGreen.green.enabled=true \
                  --set blueGreen.green.image.tag=$(tag) \
                  --namespace default


                
                helm upgrade --install bestrong-api \
                  $(Agent.TempDirectory)/bestrong-$(Build.BuildId).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(tag) \
                  --set replicaCount=2 \
                  --set image.pullPolicy=IfNotPresent \
                  --set environment.ASPNETCORE_ENVIRONMENT=Production \
                  --set ingress.host=bestrong.local \
                  --set tls.issuer=selfsigned-issuer \
                  --set blueGreen.enabled=true \
                  --set blueGreen.activeEnvironment=green \
                  --set blueGreen.blue.enabled=true \
                  --set blueGreen.blue.image.tag=158 \
                  --set blueGreen.green.enabled=true \
                  --set blueGreen.green.image.tag=$(tag) \
                  --namespace default

                echo " Cleaning up old Blue environment..."
                helm upgrade --install bestrong-api \
                  $(Agent.TempDirectory)/bestrong-$(Build.BuildId).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(tag) \
                  --set replicaCount=2 \
                  --set image.pullPolicy=IfNotPresent \
                  --set environment.ASPNETCORE_ENVIRONMENT=Production \
                  --set ingress.host=bestrong.local \
                  --set tls.issuer=selfsigned-issuer \
                  --set blueGreen.enabled=true \
                  --set blueGreen.activeEnvironment=green \
                  --set blueGreen.blue.enabled=false \
                  --set blueGreen.green.enabled=true \
                  --set blueGreen.green.image.tag=$(tag) \
                  --namespace default
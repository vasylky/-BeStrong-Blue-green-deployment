variables:
  azureContainerRegistry: 'bestrong'
  azureResourceGroup: 'rg-bestrong'
  imageRepository: 'bestrong-api'
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: 'bestrong-acr'
  azureRmServiceConnection: 'azure-conn'

trigger:
  branches:
    include:
      - main  # Replace with your branch name

stages:
# Stage 1: Build & Push Docker Image to ACR
- stage: Build
  jobs:
  - job: BuildAndPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
    - task: Bash@3
      displayName: 'Debug: List repository contents'
      inputs:
        targetType: 'inline'
        script: |
          echo "Repository contents:"
          ls -R $(Build.SourcesDirectory)
          echo "Helm directory contents:"
          ls -R $(Build.SourcesDirectory)/Helm || echo "Helm directory not found"
          echo "Checking specific files:"
          for file in Helm/monitoring/values.yaml Helm/config/selfsigned-clusterissuer.yaml Helm/config/bestrong-alerts.yaml Helm/config/bestrong-servicemonitor.yaml; do
            if [ -f "$(Build.SourcesDirectory)/$file" ]; then
              echo "Found $file"
            else
              echo "Warning: $file not found, will create in pipeline"
            fi
          done
    - task: Docker@2
      displayName: 'Login to ACR'
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(imageRepository)'
        command: buildAndPush
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)
          latest

# Stage 2: Package & Push Helm Chart to ACR
- stage: Package
  displayName: 'Package Helm Chart'
  jobs:
  - job: PackageHelmChart
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      submodules: true
      fetchDepth: 0
      persistCredentials: true
    - task: Bash@3
      displayName: 'Debug: List repository contents'
      inputs:
        targetType: 'inline'
        script: |
          echo "Repository contents:"
          ls -R $(Build.SourcesDirectory)
          echo "Helm directory contents:"
          ls -R $(Build.SourcesDirectory)/Helm || echo "Helm directory not found"
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'
    - task: AzureCLI@2
      displayName: 'Push Helm Chart to ACR as OCI artifact'
      inputs:
        azureSubscription: '$(azureRmServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(azureContainerRegistry)
          helm package $(Build.SourcesDirectory)/Helm \
            --version $(Build.BuildId) \
            --destination $(Build.ArtifactStagingDirectory)
          export HELM_EXPERIMENTAL_OCI=1
          CHART_PATH=$(Build.ArtifactStagingDirectory)/bestrong-$(Build.BuildId).tgz
          helm push $CHART_PATH oci://$(azureContainerRegistry).azurecr.io/helm

# Stage 3: Deploy to AKS (Blue-Green)
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn:
    - Build
    - Package
  jobs:
  - deployment: DeployToAKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: 'latest'
          - task: AzureCLI@2
            displayName: 'Install cert-manager and monitoring'
            inputs:
              azureSubscription: '$(azureRmServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Getting AKS credentials..."
                az aks get-credentials -n aks-bestrong -g $(azureResourceGroup)
                kubectl cluster-info

                echo "Creating missing configuration files if they do not exist..."
                mkdir -p $(Build.SourcesDirectory)/Helm/config
                mkdir -p $(Build.SourcesDirectory)/Helm/monitoring

                if [ ! -f "$(Build.SourcesDirectory)/Helm/config/selfsigned-clusterissuer.yaml" ]; then
                  echo "Creating selfsigned-clusterissuer.yaml..."
                  cat << EOF > $(Build.SourcesDirectory)/Helm/config/selfsigned-clusterissuer.yaml
                apiVersion: cert-manager.io/v1
                kind: ClusterIssuer
                metadata:
                  name: selfsigned-issuer
                spec:
                  selfSigned: {}
                EOF
                fi

                if [ ! -f "$(Build.SourcesDirectory)/Helm/monitoring/values.yaml" ]; then
                  echo "Creating monitoring/values.yaml..."
                  cat << EOF > $(Build.SourcesDirectory)/Helm/monitoring/values.yaml
                prometheus:
                  prometheusSpec:
                    replicas: 1
                    serviceMonitorSelectorNilUsesHelmValues: false
                grafana:
                  enabled: true
                  adminPassword: prom-operator
                EOF
                fi

                echo "Installing ingress-nginx with LoadBalancer..."
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                helm repo update
                helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                  --namespace ingress-nginx \
                  --create-namespace \
                  --set controller.service.type=LoadBalancer

                echo "Installing cert-manager..."
                helm repo add jetstack https://charts.jetstack.io
                helm repo update
                helm upgrade --install cert-manager jetstack/cert-manager \
                  --namespace cert-manager \
                  --create-namespace \
                  --set installCRDs=true

                echo "Applying Self-Signed ClusterIssuer..."
                kubectl apply -f $(Build.SourcesDirectory)/Helm/config/selfsigned-clusterissuer.yaml

                echo "Installing Prometheus and Grafana..."
                helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                helm repo update
                helm upgrade --install monitoring prometheus-community/kube-prometheus-stack \
                  --namespace monitoring \
                  --create-namespace \
                  -f $(Build.SourcesDirectory)/Helm/monitoring/values.yaml

                echo "Waiting for CRDs to become available..."
                for crd in prometheuses.monitoring.coreos.com prometheusrules.monitoring.coreos.com servicemonitors.monitoring.coreos.com; do
                  echo "Waiting for CRD $crd..."
                  timeout 300 bash -c "until kubectl get crd $crd > /dev/null 2>&1; do sleep 5; done"
                  if [ $? -ne 0 ]; then
                    echo "Error: CRD $crd not available after 300 seconds"
                    exit 1
                  fi
                done
          - task: AzureCLI@2
            displayName: 'Apply monitoring resources and deploy application'
            inputs:
              azureSubscription: '$(azureRmServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Creating bestrong-servicemonitor.yaml if it does not exist..."
                if [ ! -f "$(Build.SourcesDirectory)/Helm/config/bestrong-servicemonitor.yaml" ]; then
                  echo "Creating bestrong-servicemonitor.yaml..."
                  cat << EOF > $(Build.SourcesDirectory)/Helm/config/bestrong-servicemonitor.yaml
                apiVersion: monitoring.coreos.com/v1
                kind: ServiceMonitor
                metadata:
                  name: bestrong-api-servicemonitor
                  namespace: monitoring
                  labels:
                    app.kubernetes.io/managed-by: Helm
                    app.kubernetes.io/name: bestrong-api
                    release: monitoring
                  annotations:
                    meta.helm.sh/release-name: monitoring
                    meta.helm.sh/release-namespace: monitoring
                spec:
                  selector:
                    matchLabels:
                      app: bestrong-api
                  endpoints:
                  - port: http
                    path: /metrics
                  namespaceSelector:
                    matchNames:
                    - default
                EOF
                fi

                echo "Cleaning up existing monitoring resources in default namespace..."
                kubectl delete prometheusrule bestrong-api-alerts -n default --ignore-not-found=true
                kubectl delete servicemonitor bestrong-api-servicemonitor -n default --ignore-not-found=true

                echo "Applying monitoring resources in monitoring namespace..."
                kubectl apply -f $(Build.SourcesDirectory)/Helm/config/bestrong-alerts.yaml
                kubectl apply -f $(Build.SourcesDirectory)/Helm/config/bestrong-servicemonitor.yaml

                echo "Logging in to ACR..."
                for i in {1..3}; do
                  az acr login --name $(azureContainerRegistry) && break
                  echo "ACR login attempt $i failed, retrying..."
                  sleep 5
                done

                echo "Pulling Helm chart from ACR..."
                export HELM_EXPERIMENTAL_OCI=1
                helm pull oci://$(azureContainerRegistry).azurecr.io/helm/bestrong:$(Build.BuildId) --destination $(Agent.TempDirectory)

                echo "Inspecting Helm chart..."
                helm template $(Agent.TempDirectory)/bestrong-$(Build.BuildId).tgz --debug > helm-template-output.yaml
                cat helm-template-output.yaml

                echo "Deploying Green environment and cleaning up Blue..."
                helm upgrade --install bestrong-api \
                  $(Agent.TempDirectory)/bestrong-$(Build.BuildId).tgz \
                  --set image.repository=$(azureContainerRegistry).azurecr.io/$(imageRepository) \
                  --set image.tag=$(tag) \
                  --set replicaCount=2 \
                  --set image.pullPolicy=IfNotPresent \
                  --set environment.ASPNETCORE_ENVIRONMENT=Production \
                  --set ingress.host=bestrong.local \
                  --set tls.issuer=selfsigned-issuer \
                  --set blueGreen.enabled=true \
                  --set blueGreen.activeEnvironment=green \
                  --set blueGreen.blue.enabled=false \
                  --set blueGreen.green.enabled=true \
                  --set blueGreen.green.image.tag=$(tag) \
                  --namespace default